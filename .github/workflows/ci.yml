name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements-dev.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          pip install ruff black

      - name: Run ruff
        run: ruff check src/ tests/

      - name: Run black check
        run: black --check src/ tests/

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt', 'requirements-dev.txt') }}

      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run pytest with coverage
        run: |
          pytest tests/ --cov=src --cov-report=xml --cov-report=term --cov-fail-under=80

      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: pip install pip-audit

      - name: Run vulnerability scan
        run: |
          pip-audit --desc --fix --dry-run || true
          pip-audit --desc -f json -o audit-report.json || true

      - name: Upload audit report
        uses: actions/upload-artifact@v4
        with:
          name: security-audit
          path: audit-report.json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security]
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=sha,prefix={{branch}}-
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max
          labels: ${{ steps.meta.outputs.labels }}

  canary-deploy:
    name: Canary Deployment
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Pull Docker image
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Run canary container
        run: |
          docker run -d \
            --name canary-deployment \
            -p 8000:8000 \
            -e CANARY=true \
            -e ENVIRONMENT=canary \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.sha }}

      - name: Wait for container to be healthy
        run: |
          echo "Waiting for canary deployment to be ready..."
          timeout 60 bash -c 'until curl -f http://localhost:8000/health; do sleep 2; done'

  acceptance-tests:
    name: Acceptance Tests
    runs-on: ubuntu-latest
    needs: canary-deploy
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: pip install requests pytest

      - name: Run golden-set queries
        run: |
          python -c "
          import requests
          import sys
          
          base_url = 'http://localhost:8000'
          golden_queries = [
              {'text': 'This product is amazing!'},
              {'text': 'I hate this service.'},
              {'text': 'It works as expected.'},
              {'text': 'Terrible experience, never again.'},
              {'text': 'Best purchase ever made!'}
          ]
          
          failed = 0
          for i, query in enumerate(golden_queries, 1):
              try:
                  response = requests.post(f'{base_url}/predict', json=query, timeout=10)
                  if response.status_code != 200:
                      print(f'❌ Query {i} failed with status {response.status_code}')
                      failed += 1
                  else:
                      print(f'✅ Query {i} passed')
              except Exception as e:
                  print(f'❌ Query {i} failed with error: {e}')
                  failed += 1
          
          if failed > 0:
              sys.exit(1)
          print(f'\\n🎉 All {len(golden_queries)} acceptance tests passed!')
          "

      - name: Cleanup canary deployment
        if: always()
        run: |
          docker stop canary-deployment || true
          docker rm canary-deployment || true