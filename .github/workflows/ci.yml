name: MLOps CI/CD Pipeline

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  AWS_REGION: ap-south-1
  IMAGE_NAME: mlops-app
  PROJECT_NAME: mlops-project

jobs:
  # =====================================================
  # 1Ô∏è‚É£ Linting and Formatting
  # =====================================================
  lint:
    name: Lint and Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install linting tools
        run: pip install black ruff

      - name: Run lint checks
        run: |
          black --check src
          ruff src

  # =====================================================
  # 2Ô∏è‚É£ Testing
  # =====================================================
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install -r requirements.txt pytest pytest-cov

      - name: Run tests
        run: pytest --cov=src --cov-fail-under=80

  # =====================================================
  # 3Ô∏è‚É£ Build Docker Image
  # =====================================================
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test
    steps:
      - uses: actions/checkout@v4

      - name: Build Docker image
        run: docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .

      - name: Save Docker image for later jobs
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: |
            Dockerfile
            src/

  # =====================================================
  # 4Ô∏è‚É£ Push Docker Image to ECR
  # =====================================================
  push-ecr:
    name: Push to Amazon ECR
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and Push Docker Image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build -t $ECR_REGISTRY/${{ env.IMAGE_NAME }}:$IMAGE_TAG .
          docker push $ECR_REGISTRY/${{ env.IMAGE_NAME }}:$IMAGE_TAG
          echo "‚úÖ Image pushed to ECR: $ECR_REGISTRY/${{ env.IMAGE_NAME }}:$IMAGE_TAG"

  # =====================================================
  # 5Ô∏è‚É£ Canary Deploy to EC2
  # =====================================================
  deploy-ec2:
    name: Deploy to EC2 Instance
    runs-on: ubuntu-latest
    needs: push-ecr
    steps:
      - name: SSH and Deploy Container
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_PUBLIC_IP }}
          username: ec2-user
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            echo "üñ•Ô∏è Pulling latest image from ECR..."
            aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

            sudo docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ github.sha }}
            sudo docker stop ${{ env.IMAGE_NAME }} || true
            sudo docker rm ${{ env.IMAGE_NAME }} || true

            echo "üöÄ Starting container in canary mode..."
            sudo docker run -d -p 80:8000 \
              --env-file /home/ec2-user/.env \
              -e CANARY=true \
              --name ${{ env.IMAGE_NAME }} \
              ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/${{ env.IMAGE_NAME }}:${{ github.sha }}

  # =====================================================
  # 6Ô∏è‚É£ Acceptance Tests (Golden Queries)
  # =====================================================
  acceptance-tests:
    name: Run Canary Acceptance Tests
    runs-on: ubuntu-latest
    needs: deploy-ec2
    steps:
      - name: Wait for container to start
        run: sleep 20

      - name: Run health and inference tests
        run: |
          for i in {1..5}; do
            curl -f http://${{ secrets.EC2_PUBLIC_IP }}/health || exit 1
            curl -f http://${{ secrets.EC2_PUBLIC_IP }}/predict || exit 1
          done
          echo "‚úÖ Canary deployment passed all tests!"
